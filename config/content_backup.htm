<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://a92826.github.io/cd2024/">https://a92826.github.io/cd2024/</a></p>
<p>網誌:<a href="https://a92826.github.io/cd2024/blog" title="https://a92826.github.io/cd2024/blog">https://a92826.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://a92826.github.io/cd2024/reveal" title="https://a92826.github.io/cd2024/reveal">https://a92826.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/a92826/cd2024">https://github.com/a92826/cd2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h1>2a w4 教學影片任務</h1>
<h2>cd2024 2a w2 4 利用 Replit 管理 Github Classroom 分組倉儲</h2>
<h2 class="style-scope ytd-watch-metadata"><yt-formatted-string class="style-scope ytd-watch-metadata" force-default-style="">cd2024_2a_w2_1</yt-formatted-string></h2>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/i5Nd69gyqGg?si=oxddneY7WmtC4J9N" title="YouTube video player" width="560"></iframe></p>
<p>影片摘要:</p>
<p>這部影片主要講述了在 Replit 平台上建立團隊、分組、設定管理權限以及進行程式開發的流程。具體內容如下：</p>
<ol>
<li>
<p>計劃中的團隊建立：</p>
<ul>
<li>每個組需要有明確的識別信息，包括組名、組長名稱、Github 帳號等。</li>
<li>使用 Replit 平台創建團隊時，組員需要選擇正確的組別並加入相應的團隊。</li>
</ul>
</li>
<li>
<p>組長的操作：</p>
<ul>
<li>組長可以使用 SSH 方式添加管理權限，這需要對 Github 帳號和程式碼倉庫進行設定。</li>
<li>在 Replit 使用者界面，組長可以方便地管理團隊，包括建立分組作業、管理團隊成員、設定權限等。</li>
</ul>
</li>
<li>
<p>程式開發流程：</p>
<ul>
<li>進入程式碼倉庫後，可以進行靜態部署（如編輯 HTML、CSS 檔案）和動態部署（使用 Python 進行開發）。</li>
<li>提交程式碼時，可以使用 Git 的相關指令（如 git add、git commit、git push）進行管理，確保程式碼的同步和版本控制。</li>
<li>注意容量限制和運行時間，避免超出限制造成開發困難。</li>
</ul>
</li>
</ol>
<p></p>
<p>00:03:01 - 00:03:25<br/>如<br/>00:04:11 - 00:06:15<br/>我們假如來看這<br/>00:07:16 - 00:09:13<br/>上面的這個規劃的<br/>00:10:01 - 00:13:07<br/>一下每一組都要知道他的這一<br/>00:14:16 - 00:16:02<br/>組別的團隊<br/>00:17:06 - 00:18:28<br/>現在用的這個其中<br/>00:20:07 - 00:22:01<br/>稱呢叫做2A嗎對不對<br/>00:23:08 - 00:24:17<br/>以第一組<br/>00:25:07 - 00:26:21<br/>n我<br/>00:27:13 - 00:29:17<br/>建立這個me turn MI<br/>00:30:08 - 00:32:23<br/>然後我們是A8A<br/>00:33:11 - 00:35:04<br/>然後是group one<br/>00:36:10 - 00:37:17<br/>一旦假如<br/>00:38:12 - 00:39:22<br/>待會團隊建<br/>00:40:10 - 00:41:28<br/>你也拿到這個<br/>00:42:14 - 00:43:11<br/>你就join<br/>00:44:16 - 00:46:11<br/>所以假如是第二組的<br/>00:47:28 - 00:48:22<br/>建立自<br/>00:50:14 - 00:53:10<br/>第二叫MIMID<br/>00:54:14 - 00:55:21<br/>da<br/>00:56:20 - 00:57:14<br/>2<br/>00:58:17 - 00:59:20<br/>好一直到七<br/>01:00:19 - 01:01:27<br/>八這樣下去<br/>01:01:27 - 01:03:04<br/>好所以這裡就是<br/>01:03:28 - 01:05:19<br/>規定好的這個<br/>01:07:10 - 01:09:07<br/>好所以我現在就是<br/>01:09:22 - 01:12:22<br/>換到第一組組長的github賬號<br/>01:13:22 - 01:15:12<br/>很好OK<br/>01:15:12 - 01:16:19<br/>這個是他的賬號<br/>01:17:23 - 01:19:02<br/>到這個<br/>01:19:26 - 01:22:04<br/>建立2A的這個分組作業<br/>01:22:26 - 01:23:26<br/>點進來<br/>01:23:26 - 01:27:01<br/>就可以直接進入<br/>01:28:16 - 01:30:05<br/>他的這個部分我的<br/>01:30:25 - 01:32:11<br/>這個示範的<br/>01:32:26 - 01:34:14<br/>啊那你你不要加入<br/>01:34:29 - 01:36:14<br/>不能再加入其他<br/>01:37:04 - 01:39:14<br/>OK好所以我這邊我叫<br/>01:40:04 - 01:45:26<br/>組長嗎dag one你<br/>01:47:00 - 01:47:00<br/>MID然後是然後是ag1<br/>01:52:04 - 01:53:27<br/>好所以我這樣子的話<br/>01:56:12 - 01:59:22<br/>假如剛剛那個連結啊我第一組的組員<br/>02:00:01 - 02:02:20<br/>點進來之後啊他就選擇<br/>02:03:19 - 02:03:19<br/>哦那你不要加錯組了你就是第一組的組員才加入<br/>02:07:08 - 02:10:08<br/>那我們是MId甲班<br/>02:10:28 - 02:12:25<br/>group one好就<br/>02:13:24 - 02:15:21<br/>好那create這個team之後<br/>02:17:10 - 02:18:28<br/>我使用者只要接<br/>02:19:12 - 02:20:21<br/>他基本上就會<br/>02:21:16 - 02:22:21<br/>的管理權<br/>02:22:25 - 02:24:21<br/>那我們昨天在乙班<br/>02:25:13 - 02:27:22<br/>那個倉儲啊是空的倉儲<br/>02:28:19 -02:29:28<br/>啊那我們看<br/>02:30:14 - 02:32:19<br/>看拿到的倉儲好像我們是7<br/>02:33:22 - 02:37:09<br/>倉儲好像是空的但是這個我不是等一下<br/>02:38:20 - 02:41:04<br/>哦所以他拿到之後啊還好<br/>02:42:10 - 02:43:29<br/>這個先樂後苦</p>
<p>先苦後樂</p>
<p>所以你講</p>
<p>要怎麼從零開始的話</p>
<p>後面再來</p>
<p>用這個期末專案的時候再來</p>
<p>乙班昨天拿到</p>
<p>template</p>
<p>什麼啊我們這個就直接複製對</p>
<p>這個進來之後啊因為我是以</p>
<p>我們甲班第一組</p>
<p>我已經有管理權</p>
<p>可是我那個前面</p>
<p>我們的期中</p>
<p>名稱</p>
<p>後面這個就是第一組組長建</p>
<p>所以這個就是對</p>
<p>倉儲OK</p>
<p>還沒有起來</p>
<p>所以組長的話</p>
<p>當然也可以交代</p>
<p>進入這個</p>
<p>好然後我就可以進入</p>
<p>進入這個主分支</p>
<p>然後我把它</p>
<p>啊所以這個就比昨天乙班</p>
<p>你在這邊的話只需</p>
<p>我啟動跟他pages</p>
<p>可以把它弄起來</p>
<p>把它弄起來之後啊其實</p>
<p>可以接著來做所謂code</p>
<p>OK因為在這個code底</p>
<p>的話我以管理</p>
<p>每一個主人都有</p>
<p>所以我只需要點code</p>
<p>看到這邊啊他的</p>
<p>一個codespaces</p>
<p>OK所以你在</p>
<p>對任何一個倉儲其實都可以點</p>
<p>creat那creat他就會跳到這個</p>
<p>的環境啊那這邊的話就是給你的資源相對就比較多了</p>
<p>許多的終端機</p>
<p>所以我們就不需要在像</p>
<p>共用443然後在那邊切</p>
<p>不用他這邊可以兩個同時起來我起來把它啟動給你</p>
<p>這邊的意思就是說你必須要等他</p>
<p>哎他所以靜態他應該有了</p>
<p>只需要進到這裡面</p>
<p>所以我從這裡點</p>
<p>已經OK了就跟我們個人</p>
<p>只不過他是登</p>
<p>所以你假如說</p>
<p>反他的話</p>
<p>OK</p>
<p>因為你已經沒有辦法直接用a com去設定許可權</p>
<p>上許可權吶不會跑到這個</p>
<p>你雖然擁有這個賬號的許可權啊這個倉儲的</p>
<p>但是他是登記在這個MD24</p>
<p>所以我們的做法是把它</p>
<p>我們用SSH</p>
<p>也就是點SSH的方式我們把key的部分放進來</p>
<p>還是可以拿到許可權在replit</p>
<p>可是在replit</p>
<p>用起來刪掉你的這個點SSH就</p>
<p>不是方法</p>
<p>可是你假如是在這裡面就</p>
<p>我們要啟動這個動態的話我們只需要</p>
<p>加上因為我們現在要安裝模組</p>
<p>把模組裝起來所以這個呢</p>
<p>終端機他</p>
<p>端機</p>
<p>之後啊你就利用</p>
<p>我们去改变模式</p>
<p>被使用者</p>
<p>加上執行</p>
<p>然后是哪一个档呢是init</p>
<p>replit好那只要</p>
<p>之后啊我们就可以直接</p>
<p>然后他就会帮我们把</p>
<p>给安装好那这个时候你就可以感受到他给我们的两个code啊</p>
<p>大的这个记忆体啊他速度也比较快一点</p>
<p>OK已经好了所以这个时候啊我们</p>
<p>发现我们没有run了对不对</p>
<p>设定了所以你必须要自己</p>
<p>python3 main.py</p>
<p>我的意思就是说我现在要</p>
<p>我的main.py</p>
<p>你伺服</p>
<p>init的網址跟</p>
<p>啊所以这个部分你只要按这个</p>
<p>会执行动态的</p>
<p>告诉你说</p>
<p>利用8080</p>
<p>用浏览器开启</p>
<p>按到你的</p>
<p>所以这个时候</p>
<p>因为他这个也是乱码</p>
<p>所以我们也不用去管ADMIN</p>
<p>别人会进来因为别人根本不晓得</p>
<p>是用什么所以同样的我们就用admin进来</p>
<p>哎好了进来之后</p>
<p>你就可以直接点这个然后告诉他说我是MId1</p>
<p>哎分组</p>
<p>好然后我是send</p>
<p>我在这里面我就convert</p>
<p>然后你回来的话也也没有</p>
<p>所以你这个终端机现在我没有在背后执行</p>
<p>你就跑到他的menu这里</p>
<p>然后他就有</p>
<p>你要开启</p>
<p>正常就是一个月120个core</p>
<p>core是小時</p>
<p>时间就要争取</p>
<p>我就打开一个新</p>
<p>好所以你透过这个menu你</p>
<p>我可以</p>
<p>那我新增这个終端機</p>
<p>这个时候我是</p>
<p>push对吧</p>
<p>这就在执行</p>
<p>这个我现在要执行</p>
<p>所以我就git add</p>
<p>哎我在git commit</p>
<p>告诉他说我是已经</p>
<p>把</p>
<p>开头哎那应该是</p>
<p>网页网页的标题</p>
<p>问了啊好所以我这个时候我就commit</p>
<p>然后你会发现说github</p>
<p>因为他就是github账号</p>
<p>前面有权限的问题</p>
<p>直接就推了连设定也不用</p>
<p>他已经在转档</p>
<p>你只要回头</p>
<p>在这个对</p>
<p>档</p>
<p>那么在哪里转档</p>
<p>在</p>
<p>转档他已经在转档</p>
<p>提交已经跑到这里来哎那我</p>
<p>静态怎么办</p>
<p>好那启动静态假如</p>
<p>这个终端机你是在启动</p>
<p>通常我们会在三</p>
<p>OK所以现在是三个所以这个是让你a commit push</p>
<p>那这个我想要</p>
<p>静态啊那静态啊因为这里有python</p>
<p>我python3</p>
<p>模组</p>
<p>server</p>
<p>的意思就是说</p>
<p>这边就</p>
<p>所以我用python3啊</p>
<p>表示模组</p>
<p>因为python3他是内建HTTP</p>
<p>哎那我们在replit</p>
<p>这样做因为他不行啊因为他</p>
<p>啊那在这里就可以因为他给</p>
<p>所以我们现在</p>
<p>他都不管你</p>
<p>他都开</p>
<p>下去的时候他又启动</p>
<p>git pull好</p>
<p>那你这里打开就是静态</p>
<p>然后呢那就很方便</p>
<p>打开这里就静态</p>
<p>好那只是说</p>
<p>你要来编辑</p>
<p>我们当然不会在这里但会</p>
<p>我在这里然后</p>
<p>半天</p>
<p>然后用的</p>
<p>算秒的对不对</p>
<p>这</p>
<p>不会在这里</p>
<p>你看我要赶快把它</p>
<p>啊我就跳到这边来我下哎</p>
<p>一秒一秒过去</p>
<p>对</p>
<p>我就直接跳到这里</p>
<p>那要关掉它有两个地方一个</p>
<p>首先从这里把它关掉因为我已经不要</p>
<p>OK那关掉他就不不去</p>
<p>死了</p>
<p>他应该就关掉了</p>
<p>对我已经把我的codespace是关掉哎</p>
<p>關掉</p>
<p>再按一下</p>
<p>哦他要让他執行</p>
<p>只是启动3个</p>
<p>好所以我</p>
<p>关掉</p>
<p>你看到他的地方啊就是</p>
<p>github在</p>
<p>你直接打codespace</p>
<p>哎他就会看到我已经</p>
<p>第一组组长的账号</p>
<p>啊你按他他基本上</p>
<p>那现在他给你的</p>
<p>两个core</p>
<p>大方给你8RAM 8gb</p>
<p>是你的容量我那容量我们刚</p>
<p>看到他是允许总容量</p>
<p>量是15好所以我们刚刚可能用的</p>
<p>好所以他基本上</p>
<p>两个小时</p>
<p>会启动</p>
<p>计时的</p>
<p>那么容量啊我们来编辑</p>
<p>哎我们就</p>
<p>你就直接跑到每一个人登</p>
<p>工作他是不算是</p>
<p>点这个</p>
<p>OK那在这里做你另外</p>
<p>转档提交哎在</p>
<p>提交呢那你</p>
<p>可以啊你在这边你想要</p>
<p>的答案</p>
<p>改名也可以</p>
<p>好那你</p>
<p>看好之后</p>
<p>然后你再想办法跑到codespace</p>
<p>是你回到re</p>
<p>replit因为</p>
<p>他也</p>
<p>好</p>
<p>影片我们再来</p>
<p>那我假如把</p>
<p>对应的</p>
<p>刚刚设定的这个分组</p>
<p>丢到这里之后啊我到底要</p>
<p>我到底应该要怎么样来</p>
<p>的权限OK好所以我们这个影片就</p>
<p>这边然后待会</p>
<p>这个</p>
<p>组的</p>
<p>在我们的</p>
<p>团队里面好所以我们先把</p>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>